Esta vez hemos implementado los TADs utilizados en el primer laboratorio.
Nuestros TADs SList, Queue, Stack fueron escritos tomando como base la API de
los TADs correspondientes en GLib. Esto tiene como motivo la reutilización del
código del proyecto anterior, manteniendo la funcionalidad que necesitábamos.

Se ha reimplementado una hash para adaptarla a lo que necesitábamos en el
Network (Fork de proyecto https://github.com/ankurs/Hash-Table).

Se ha extendido la estructura de las aristas para que tengan la noción de
flujo.

Se mantuvo la representación del network. Es una hash que mapea nodos con
sus aristas vecinas. Pero por el algoritmo y la nueva propiedad de flujos en un
network, el concepto de aristas vecinas se cambió.
Una arista está en la lista de aristas vecinas a un nodo si:
 * Tienen a ese nodo como primer elemento (Aristas Forward).
 * Tienen a ese nodo como segundo elemento y pueden devolver flujo (flujo > 0).
   (Aristas Backwards).

Se eligió no restringir las aristas forward (Haciendo que solo estén si no se
saturaron) para que siempre sean encontradas en la búsqueda del primer nodo. El
flujo después nos dirá si pueden utilizarse o no.

Otra optimización que elegimos fue almacenar los nodos no sólo con sus listas
de edges vecinos, si no también con un contador de referencias. El motivo fue
conocer rápidamente si un nodo esta en el network o no.
Por ejemplo:
    Si agrego una arista s -> A a nuestro network, en la hash estará almacenada
    la key s con su arista s -> A, pero no lo estará la key A (No hay flujo al
    inicio del algoritmo, por lo que no puede agregarse como backward). Lo
    solucionamos teniendo un contador de las referencias (Que estará en 1 en
    ambas keys).

Así, cualquier nodo del network está como key en la hash, haciendo la operación
para ver si un nodo esta mucho más fácil.
